/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.myCode.pradnya.server.cult.api;

import com.myCode.pradnya.server.cult.model.ErrorResponse;
import com.myCode.pradnya.server.cult.model.ExternalErrorResponse;
import com.myCode.pradnya.server.cult.model.VersionInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-02-22T00:41:41.111094+05:30[Asia/Kolkata]")
@Validated
public interface VersionApi {

    Logger log = LoggerFactory.getLogger(VersionApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Get version", description = "Get the version of the service", security = {
        @SecurityRequirement(name = "Bearer")    }, tags={ "API Information" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "the service health status", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VersionInfo.class))),
        
        @ApiResponse(responseCode = "401", description = "The request requires user authentication", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExternalErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request cannot be fulfilled", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExternalErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "The server encountered an unexpected condition that prevented it from fulfilling the request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "502", description = "The server received an invalid response from the upstream server", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "The server is not ready to handle the request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "504", description = "The server did not get a response in time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "5XX", description = "API response in case of errors.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/version",
        produces = "application/json", 
        method = RequestMethod.GET)
    default ResponseEntity<VersionInfo> getVersion(@Parameter(in = ParameterIn.HEADER, description = "Auto-generated ID, which uniquely identifies the request, available in the response.  When contacting support with an inquiry regarding a specific request, provide the value of this header which will help troubleshooting the issue.  If not present, one will be generated." ,schema=@Schema()) @RequestHeader(value="X-Correlation-ID", required=false) String xCorrelationID, @Parameter(in = ParameterIn.HEADER, description = "User-provided token that can be used to trace a request or a group of requests sent to the service.  If not present, one will be generated." ,schema=@Schema()) @RequestHeader(value="X-Request-ID", required=false) String xRequestID) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"serviceVersion\" : \"1.0.0\",\n  \"apiVersion\" : \"1.0.0\",\n  \"dataVersions\" : [ {\n    \"name\" : \"name\",\n    \"version\" : \"version\"\n  }, {\n    \"name\" : \"name\",\n    \"version\" : \"version\"\n  } ]\n}", VersionInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default VersionApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

